{"ast":null,"code":"import'./App.css';import Navbar from'./Components/Navbar/Navbar';import React,{useState,useEffect}from'react';import SignUp from'./Components/Sign_Up/Sign_Up';import Login from'./Components/Login/Login';import FindDoctorSearch from'./Components/FindDoctorSearch/FindDoctorSearch';import InstantConsultation from'./Components/InstantConsultationBooking/InstantConsultation';import DoctorCard from'./Components/DoctorCard/DoctorCard';import Notification from'./Components/Notification/Notification';import ReviewForm from'./Components/ReviewForm/ReviewForm';import ProfileForm from'./Components/ProfileForm/ProfileForm';import ReportsLayout from'./Components/ReportsLayout/ReportsLayout';// Import ReportsLayout\nimport{BrowserRouter as Router,Route,Routes}from\"react-router-dom\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[isLoggedIn,setIsLoggedIn]=useState(false);const[username,setUsername]=useState('');const[notificationMessage,setNotificationMessage]=useState('');const[showNotification,setShowNotification]=useState(false);useEffect(()=>{const storedEmail=sessionStorage.getItem(\"email\");const storedUsername=sessionStorage.getItem(\"name\");// Ensure consistency with sessionStorage key\nif(storedEmail&&storedUsername){setIsLoggedIn(true);setUsername(storedUsername);}},[]);// Callback function to update username\nconst handleProfileUpdate=updatedUsername=>{setUsername(updatedUsername);};const handleBooking=()=>{setNotificationMessage('Your appointment has been booked successfully!');setShowNotification(true);};const handleCancelBooking=()=>{setNotificationMessage('Your appointment has been canceled.');setShowNotification(true);};const doctors=[{name:'Dr. James Brown',speciality:'Cardiologist',experience:10,ratings:4.5,profilePic:null},{name:'Dr. Jameson Daniels',speciality:'Neurologist',experience:8,ratings:4.7,profilePic:null},{name:'Dr. Sam Brown',speciality:'Pediatrician',experience:15,ratings:4.8,profilePic:null}];return/*#__PURE__*/_jsx(Router,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsx(Navbar,{isLoggedIn:isLoggedIn,username:username,setIsLoggedIn:setIsLoggedIn,setUsername:setUsername}),/*#__PURE__*/_jsx(Notification,{message:notificationMessage,visible:showNotification,onClose:()=>setShowNotification(false)}),/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/Sign_Up\",element:/*#__PURE__*/_jsx(SignUp,{setIsLoggedIn:setIsLoggedIn,setUsername:setUsername})}),/*#__PURE__*/_jsx(Route,{path:\"/Login\",element:/*#__PURE__*/_jsx(Login,{setIsLoggedIn:setIsLoggedIn,setUsername:setUsername})}),/*#__PURE__*/_jsx(Route,{path:\"/find-doctor\",element:/*#__PURE__*/_jsx(FindDoctorSearch,{})}),/*#__PURE__*/_jsx(Route,{path:\"/instant-consultation\",element:/*#__PURE__*/_jsx(InstantConsultation,{onBooking:handleBooking,onCancel:handleCancelBooking})}),/*#__PURE__*/_jsx(Route,{path:\"/reviews\",element:/*#__PURE__*/_jsx(ReviewForm,{doctorName:\"James Brown\"})}),/*#__PURE__*/_jsx(Route,{path:\"/profile\",element:/*#__PURE__*/_jsx(ProfileForm,{onProfileUpdate:handleProfileUpdate})}),/*#__PURE__*/_jsx(Route,{path:\"/reports\",element:/*#__PURE__*/_jsx(ReportsLayout,{})}),\" \"]}),/*#__PURE__*/_jsx(\"div\",{className:\"doctor-cards-container\",children:doctors.map((doctor,index)=>/*#__PURE__*/_jsx(DoctorCard,{name:doctor.name,speciality:doctor.speciality,experience:doctor.experience,ratings:doctor.ratings,profilePic:doctor.profilePic},index))})]})});}export default App;","map":{"version":3,"names":["Navbar","React","useState","useEffect","SignUp","Login","FindDoctorSearch","InstantConsultation","DoctorCard","Notification","ReviewForm","ProfileForm","ReportsLayout","BrowserRouter","Router","Route","Routes","jsx","_jsx","jsxs","_jsxs","App","isLoggedIn","setIsLoggedIn","username","setUsername","notificationMessage","setNotificationMessage","showNotification","setShowNotification","storedEmail","sessionStorage","getItem","storedUsername","handleProfileUpdate","updatedUsername","handleBooking","handleCancelBooking","doctors","name","speciality","experience","ratings","profilePic","children","className","message","visible","onClose","path","element","onBooking","onCancel","doctorName","onProfileUpdate","map","doctor","index"],"sources":["/home/project/med_app/src/App.js"],"sourcesContent":["import './App.css';\nimport Navbar from './Components/Navbar/Navbar';\nimport React, { useState, useEffect } from 'react';\nimport SignUp from './Components/Sign_Up/Sign_Up';\nimport Login from './Components/Login/Login';\nimport FindDoctorSearch from './Components/FindDoctorSearch/FindDoctorSearch';\nimport InstantConsultation from './Components/InstantConsultationBooking/InstantConsultation';\nimport DoctorCard from './Components/DoctorCard/DoctorCard';\nimport Notification from './Components/Notification/Notification';\nimport ReviewForm from './Components/ReviewForm/ReviewForm';\nimport ProfileForm from './Components/ProfileForm/ProfileForm';\nimport ReportsLayout from './Components/ReportsLayout/ReportsLayout'; // Import ReportsLayout\n\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [username, setUsername] = useState('');\n  const [notificationMessage, setNotificationMessage] = useState('');\n  const [showNotification, setShowNotification] = useState(false);\n\n  useEffect(() => {\n    const storedEmail = sessionStorage.getItem(\"email\");\n    const storedUsername = sessionStorage.getItem(\"name\"); // Ensure consistency with sessionStorage key\n\n    if (storedEmail && storedUsername) {\n      setIsLoggedIn(true);\n      setUsername(storedUsername);\n    }\n  }, []);\n\n  // Callback function to update username\n  const handleProfileUpdate = (updatedUsername) => {\n    setUsername(updatedUsername);\n  };\n\n  const handleBooking = () => {\n    setNotificationMessage('Your appointment has been booked successfully!');\n    setShowNotification(true);\n  };\n\n  const handleCancelBooking = () => {\n    setNotificationMessage('Your appointment has been canceled.');\n    setShowNotification(true);\n  };\n\n  const doctors = [\n    { name: 'Dr. James Brown', speciality: 'Cardiologist', experience: 10, ratings: 4.5, profilePic: null },\n    { name: 'Dr. Jameson Daniels', speciality: 'Neurologist', experience: 8, ratings: 4.7, profilePic: null },\n    { name: 'Dr. Sam Brown', speciality: 'Pediatrician', experience: 15, ratings: 4.8, profilePic: null },\n  ];\n\n  return (\n    <Router>\n      <div className=\"app-container\">\n        <Navbar isLoggedIn={isLoggedIn} username={username} setIsLoggedIn={setIsLoggedIn} setUsername={setUsername} />\n\n        <Notification \n          message={notificationMessage} \n          visible={showNotification} \n          onClose={() => setShowNotification(false)} \n        />\n\n        <Routes>\n          <Route path=\"/Sign_Up\" element={<SignUp setIsLoggedIn={setIsLoggedIn} setUsername={setUsername} />} />\n          <Route path=\"/Login\" element={<Login setIsLoggedIn={setIsLoggedIn} setUsername={setUsername} />} />\n          <Route path=\"/find-doctor\" element={<FindDoctorSearch />} />\n          <Route path=\"/instant-consultation\" element={<InstantConsultation onBooking={handleBooking} onCancel={handleCancelBooking} />} />\n          <Route path=\"/reviews\" element={<ReviewForm doctorName=\"James Brown\" />} />\n          <Route path=\"/profile\" element={<ProfileForm onProfileUpdate={handleProfileUpdate} />} />\n          <Route path=\"/reports\" element={<ReportsLayout />} /> {/* Add route for ReportsLayout */}\n        </Routes>\n\n        <div className=\"doctor-cards-container\">\n          {doctors.map((doctor, index) => (\n            <DoctorCard\n              key={index}\n              name={doctor.name}\n              speciality={doctor.speciality}\n              experience={doctor.experience}\n              ratings={doctor.ratings}\n              profilePic={doctor.profilePic}\n            />\n          ))}\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}